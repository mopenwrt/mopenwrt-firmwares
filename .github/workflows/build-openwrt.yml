#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

env:
  REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
  PPPOE_USERNAME: ${{ secrets.PPPOE_USERNAME }}
  PPPOE_PASSWD: ${{ secrets.PPPOE_PASSWD }}
  SCKEY: ${{ secrets.SCKEY }}
  TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  DOCKER_ID: ${{ secrets.DOCKER_ID }}
  DOCKER_PASSWD: ${{ secrets.DOCKER_PASSWD }}
  TZ: Asia/Shanghai

# env:
#   REPO_URL: https://github.com/coolsnowwolf/lede
#   REPO_BRANCH: master
#   FEEDS_CONF: feeds.conf.default
#   CONFIG_FILE: .config
#   DIY_P1_SH: diy-part1.sh
#   DIY_P2_SH: diy-part2.sh
#   UPLOAD_BIN_DIR: false
#   UPLOAD_FIRMWARE: true
#   UPLOAD_COWTRANSFER: false
#   UPLOAD_WETRANSFER: false
#   UPLOAD_RELEASE: false
#   TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-20.04

    name: Build ${{matrix.target}}
    strategy:
      fail-fast: false
      matrix:
        # target: ["${{ github.event.client_payload.target }}"]
        target: ["rockchip"]

    steps:
    - name: Checkout
      uses: actions/checkout@main
      with:
          fetch-depth: 0

    - name: cancel running workflows
      uses: styfle/cancel-workflow-action@main
      if: contains(github.event.action, 'cw')
      with:
        # Visit https://api.github.com/repos/:org/:repo/actions/workflows to find the Workflow ID(s) you wish to automaticaly cancel. workflow_id can be a Workflow ID (number) or Workflow File Name (string)
        workflow_id: 4439867
        access_token: ${{ github.token }}

    - name: Load Settings.ini
      run: |
        source "${GITHUB_WORKSPACE}/devices/common/settings.ini"
        if [ -f "devices/${{matrix.target}}/settings.ini" ]; then
          source "${GITHUB_WORKSPACE}/devices/${{matrix.target}}/settings.ini"
        fi
        echo "KMODS_IN_FIRMWARE=${KMODS_IN_FIRMWARE}" >> $GITHUB_ENV
        echo "IPV6MOD_IN_FIRMWARE=${IPV6MOD_IN_FIRMWARE}" >> $GITHUB_ENV
        echo "REPO_URL=${REPO_URL}" >> $GITHUB_ENV
        echo "REPO_BRANCH=${REPO_BRANCH}" >> $GITHUB_ENV
        echo "CONFIG_FILE=${CONFIG_FILE}" >> $GITHUB_ENV
        echo "DIY_SH=${DIY_SH}" >> $GITHUB_ENV
        echo "FREE_UP_DISK=${FREE_UP_DISK}" >> $GITHUB_ENV
        echo "UPLOAD_BIN_DIR_FOR_ARTIFACT=${UPLOAD_BIN_DIR_FOR_ARTIFACT}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE_FOR_ARTIFACT=${UPLOAD_FIRMWARE_FOR_ARTIFACT}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE_FOR_RELEASE=${UPLOAD_FIRMWARE_FOR_RELEASE}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE_TO_COWTRANSFER=${UPLOAD_FIRMWARE_TO_COWTRANSFER}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE_TO_WETRANSFER=${UPLOAD_FIRMWARE_TO_WETRANSFER}" >> $GITHUB_ENV
        echo "OPENWRTROOT=${GITHUB_WORKSPACE}/openwrt" >> $GITHUB_ENV
        chmod +x ${GITHUB_WORKSPACE}/scripts/*.sh

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        ( sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev patch python3 python2.7 unzip zlib1g-dev lib32gcc-s1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx-ucl libelf-dev autoconf automake libtool autopoint device-tree-compiler ccache xsltproc rename antlr3 gperf wget curl swig rsync
        /bin/bash ${GITHUB_WORKSPACE}/scripts/free_disk_space.sh ) &
        sudo timedatectl set-timezone "$TZ"

    - name: Get current date
      id: date
      run: |
        echo "date=$(date +'%m/%d_%Y_%H/%M')" >> $GITHUB_ENV
        echo "date2=$(date +'%m/%d %Y')" >> $GITHUB_ENV
        VERSION="$(echo "${{github.event.action}}" | grep -Eo " [0-9.]+" | sed -e 's/ //')" || true
        [ "$VERSION" ] && echo "VERSION=$VERSION" >> $GITHUB_ENV || echo "VERSION=$(date +'%m.%d')" >> $GITHUB_ENV

    - name: Clone Source Code
      run: |
        df -hT $PWD
        git config --global user.email 41898282+github-actions[bot]@users.noreply.github.com
        git config --global user.name github-actions[bot]
        git clone $REPO_URL -b $REPO_BRANCH openwrt

    - name: Free up disk space
      if: env.FREE_UP_DISK == 'true'
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo mkdir -p -m 777 /mnt/openwrt/dl /mnt/openwrt/staging_dir /mnt/openwrt/build_dir/hostpkg openwrt/build_dir
        ln -sf /mnt/openwrt/dl openwrt/dl
        ln -sf /mnt/openwrt/staging_dir openwrt/staging_dir
        ln -sf /mnt/openwrt/build_dir/hostpkg openwrt/build_dir/hostpkg

    - name: Load custom configuration
      run: |
        cp -rf devices/common/. openwrt/
        cp -rf devices/${{matrix.target}}/. openwrt/
        cp -rf devices openwrt/
        cd openwrt
        chmod +x devices/${{matrix.target}}/*.sh
        chmod +x devices/common/*.sh
        /bin/bash "devices/common/$DIY_SH"
        if [ -f "devices/${{matrix.target}}/$DIY_SH" ]; then
          /bin/bash "devices/${{matrix.target}}/$DIY_SH"
        fi
        cp -Rf ./diy/* ./
        echo cp -f devices/common/default-settings package/*/*/my-default-settings/files/uci.defaults
        if [ -f "devices/${{matrix.target}}/default-settings" ]; then
          echo >> package/*/*/my-default-settings/files/uci.defaults
          cat devices/${{matrix.target}}/default-settings >> package/*/*/my-default-settings/files/uci.defaults
        fi
        cp -f devices/common/$CONFIG_FILE .config
        if [ -f "devices/${{matrix.target}}/$CONFIG_FILE" ]; then
          echo >> .config
          cat devices/${{matrix.target}}/$CONFIG_FILE >> .config
        fi

    - name: Apply patches
      run: |
        cd openwrt
        find "devices/common/patches" -type f ! -path 'devices/common/patches/china_mirrors.patch' -name '*.patch' -print0 | sort -z | xargs -I % -t -0 -n 1 sh -c "cat '%'  | patch -d './' -p1 -E --forward --no-backup-if-mismatch"
        if [ -n "$(ls -A "devices/${{matrix.target}}/patches" 2>/dev/null)" ]; then
          find "devices/${{matrix.target}}/patches" -type f -name '*.patch' ! -name '*.revert.patch' -print0 | sort -z | xargs -I % -t -0 -n 1 sh -c "cat '%'  | patch -d './' -p1 -E --forward --no-backup-if-mismatch"
        fi

    - name: Default PPPOE Setting
      if: env.PPPOE_USERNAME && env.PPPOE_PASSWD
      run: |
        sed -i '$i uci set network.wan.username=${{ env.PPPOE_USERNAME }}' openwrt/package/*/*/my-default-settings/files/uci.defaults
        sed -i '$i uci set network.wan.password=${{ env.PPPOE_PASSWD }}' openwrt/package/*/*/my-default-settings/files/uci.defaults
        sed -i '$i uci commit network' openwrt/package/*/*/my-default-settings/files/uci.defaults

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        if "$KMODS_IN_FIRMWARE" = 'true'
        then
          echo "CONFIG_ALL_NONSHARED=y" >> .config
        fi
        [[ -f "devices/${{matrix.target}}/modify_config.sh" ]] && /bin/bash "devices/${{matrix.target}}/modify_config.sh"
        make download -j$(($(nproc)+1))
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Cache
      uses: klever1988/cachewrtbuild@main
      if: contains(github.event.action, 'nocache') == false
      with:
        ccache: 'true'
        prefix: ${{ github.workspace }}/openwrt

    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')

    - name: Compile Packages
      id: compile
      run: |
        cd $OPENWRTROOT
        echo -e "$(($(nproc)+1)) thread compile"
        make tools/compile -j$(($(nproc)+1)) || make tools/compile -j1 V=s
        make toolchain/compile -j$(($(nproc)+1)) || make toolchain/compile -j1 V=s
        make target/compile -j$(($(nproc)+1)) || make target/compile -j1 V=s IGNORE_ERRORS=1
        make diffconfig
        make package/compile -j$(($(nproc)+1)) IGNORE_ERRORS=1 || make package/compile -j1 V=s IGNORE_ERRORS=1
        make package/index
        cd $OPENWRTROOT/bin/packages/*
        PLATFORM=$(basename `pwd`)
        echo "PLATFORM=$PLATFORM" >> $GITHUB_ENV
        echo "::set-output name=PLATFORM::$(echo $PLATFORM)"
        cd $OPENWRTROOT/bin/targets/*
        TARGET=$(basename `pwd`)
        echo "TARGET=$TARGET" >> $GITHUB_ENV
        echo "::set-output name=TARGET::$(echo $TARGET)"
        cd *
        SUBTARGET=$(basename `pwd`)
        echo "SUBTARGET=$SUBTARGET" >> $GITHUB_ENV
        echo "::set-output name=SUBTARGET::$(echo $SUBTARGET)"
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=FIRMWARE::$(echo $PWD)"
        echo "::set-output name=COMPILE_STATUS::success"

    - name: Generate Firmware
      if: steps.compile.outputs.COMPILE_STATUS == 'success'
      id: generate
      run: |
        cd $OPENWRTROOT
        /bin/bash ${GITHUB_WORKSPACE}/scripts/init-feed-settings.sh
        make package/install -j$(($(nproc)+1)) || make package/install -j1 V=s
        make target/install -j$(($(nproc)+1)) || make target/install -j1 V=s
        make checksum
        echo "::set-output name=GENERATE_STATUS::success"

    # - name: Compile the firmware
    #   id: compile
    #   run: |
    #     cd openwrt
    #     echo -e "$(($(nproc)+1)) thread compile"
    #     make -j$(($(nproc)+1)) || make -j1 V=s
    #     echo "::set-output name=status::success"

    - name: Check space usage
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: env.UPLOAD_BIN_DIR_FOR_ARTIFACT == 'true'
      with:
        name: OpenWrt_bin_${{matrix.target}}
        path: openwrt/bin

    - name: Organize files
      id: organize
      run: |
        mkdir firmware
        mv -f openwrt/bin/targets/*/*/{*combined*,*sysupgrade*} ./firmware/ 2>/dev/null || true
        cp openwrt/.config  ./firmware/${{matrix.target}}.config
        cp openwrt/build_dir/target-*/linux-*/linux-*/.config ./firmware/${{matrix.target}}_kernel.config
        cd firmware
        echo "${{ env.VERSION }}.$(date +'%Y')" > version.txt
        rename -v "s/^openwrt/${{ env.VERSION }}-openwrt/" *
        rename -v "s/friendlyarm_//" *gz
        md5=$((md5sum *squashfs-sysupgrade* || md5sum *squashfs-combined-efi*) | awk '{print $1}') 2>/dev/null
        echo $md5 >> version.txt
        echo $REPO_BRANCH >> version.txt
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        Emoji=("🎉" "🤞" "✨" "🎁" "🎈" "🎄" "🎨" "💋" "🍓" "🍕" "🍉" "💐" "🌴" "🚀" "🛸" "🗽" "⛅" "🌈" "🔥" "⛄" "🐶" "🏅" "🦄" "🐤")
        echo "EMOJI=${Emoji[$[$RANDOM % ${#Emoji[@]}]]}" >> $GITHUB_ENV
        if [ ${{matrix.target}} == "x86_64" ]; then
        echo "DOCKERTAG=${{ secrets.DOCKER_ID }}/openwrt-nginx:latest" >> $GITHUB_ENV
        echo "NOTICE=请分配不少于1G的存储容量" >> $GITHUB_ENV
        fi

    - name: Deploy files to server
      uses: easingthemes/ssh-deploy@main
      if: env.SSH_PRIVATE_KEY && ! contains(github.event.action, 'noser')
      with:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        ARGS: "-avzr --exclude="
        SOURCE: firmware/
        REMOTE_HOST: op.supes.top
        REMOTE_USER: root
        TARGET: "/www/wwwroot/op.supes.top/firmware/${{matrix.target}}/"

    - name: Upload firmware for artifact
      uses: actions/upload-artifact@main
      continue-on-error: true
      if: env.UPLOAD_FIRMWARE_FOR_ARTIFACT == 'true'
      with:
        name: ${{ env.VERSION }} ${{matrix.target}}
        path: ${{ env.FIRMWARE }}

    - name: Upload firmware to cowtransfer
      if: env.UPLOAD_FIRMWARE_TO_COWTRANSFER == 'true'
      continue-on-error: true
      run: |
        curl -fsSL git.io/file-transfer | sh
        cowurl=$(./transfer cow --block 2621440 -s --no-progress ${FIRMWARE})
        cowurl=$(echo $cowurl | grep -o -E "https[^ ]*")
        echo "COWURL=$cowurl" >> $GITHUB_ENV
        echo "Download Link: ${{ env.EMOJI }} $cowurl ${{ env.EMOJI }} 🚀"

    - name: Upload firmware to WeTransfer
      if: env.UPLOAD_FIRMWARE_TO_WETRANSFER == 'true' && ! contains(github.event.action, 'noup')
      continue-on-error: true
      run: |
        curl -fsSL git.io/file-transfer | sh
        wetrans=$(./transfer wet -s -p 16 --no-progress ${FIRMWARE})
        wetrans=$(echo $wetrans | grep -o -E "https[^ ]*")
        echo "WETRANS=$wetrans" >> $GITHUB_ENV
        echo "Download Link: ${{ env.EMOJI }} $wetrans ${{ env.EMOJI }} 🚀"

    - name: Create release
      id: create_release
      if: env.REPO_TOKEN && env.UPLOAD_FIRMWARE_FOR_RELEASE == 'true'
      continue-on-error: true
      run: |
        echo -e "墙内加速下载 🚀:\n" >> release.txt
        echo -e "[腾讯云] (https://op.supes.top/firmware/${{matrix.target}}/ ☁)\n" >> release.txt
        [ ${{ env.WETRANS }} ] && echo -e "[WeTransfer] (${{ env.WETRANS }} 🗽)\n" >> release.txt
        [ ${{ env.COWURL }} ] && echo -e "[奶牛上传] (${{ env.COWURL }} 🐮)\n" >> release.txt
        [ ${{ env.NOTICE }} ] && echo -e "${{ env.NOTICE }}" >> release.txt || true

    - name: Upload firmware for release
      uses: softprops/action-gh-release@master
      continue-on-error: true
      if: env.REPO_TOKEN && env.UPLOAD_FIRMWARE_FOR_RELEASE == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
      with:
        files: "${{ env.FIRMWARE }}/*"
        name: ${{ env.date2 }} ${{matrix.target}} ${{ env.EMOJI }}
        tag_name: ${{ env.date }}_${{matrix.target}}
        body_path: release.txt

    - name: Set Up Docker Buildx
      uses: docker/setup-buildx-action@master
      if: env.DOCKER_ID && env.DOCKER_PASSWD

    - name: Login To DockerHub
      uses: docker/login-action@master
      if: env.DOCKER_ID && env.DOCKER_PASSWD
      with:
        username: ${{ secrets.DOCKER_ID }}
        password: ${{ secrets.DOCKER_PASSWD }}

    - name: Build and push docker image
      uses: docker/build-push-action@master
      continue-on-error: true
      if: env.DOCKER_ID && env.DOCKER_PASSWD && ! contains(github.event.action, 'noser')
      with:
        platforms: ${{ env.ARCH }}
        file: Dockerfile
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_ID }}/openwrt-nginx:${{ matrix.target }}
          ${{ env.DOCKERTAG }}

    - name: WeChat notification
      continue-on-error: true
      if: env.SCKEY
      run: |
        # [ steps.compile.outputs.status == 'success' ] && curl https://sctapi.ftqq.com/${{ secrets.SCKEY }}.send?text=🎉OpenWrt_${{ env.VERSION }}_${{matrix.target}}编译完成😋|| curl https://sctapi.ftqq.com/${{ secrets.SCKEY }}.send?text=❌OpenWrt_${{ env.VERSION }}_${{matrix.target}}编译失败😂

    - name: Telegram notification
      if: env.TELEGRAM_TOKEN && ! contains(github.event.action, 'notg')
      continue-on-error: true
      run: |
        [ steps.compile.outputs.status == 'success' ] && curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=🎉 OpenWrt ${{ env.VERSION }} ${{matrix.target}} 编译成功 😋  https://op.supes.top/firmware/${{matrix.target}}/  ${{ env.COWURL }}   ${{ env.WETRANS }} 🚀" "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" || curl -k --data chat_id="${{ secrets.TELEGRAM_TO }}" --data "text=❌ OpenWrt ${{ env.VERSION }} ${{matrix.target}} 编译失败 😂" "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage"

    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      continue-on-error: true
      with:
        retain_days: 10
        keep_minimum_runs: 0

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@master
      continue-on-error: true
      if: env.UPLOAD_FIRMWARE_FOR_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 15
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
